# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    
    order_service:
        class:                         AppBundle\Services\OrderService
        public: true
        arguments: ['@order_repository_service', '@order_status_repository_service', '@searcher_order_service', '@response_view_service', '@logger']  
   
    order_repository_service:
        class:                         AppBundle\Services\NosqlBundle\OrderRepositoryService
        public: true
        arguments: ['@doctrine_mongodb', '@logger']  
        
    order_status_repository_service:
        class:                         AppBundle\Services\NosqlBundle\OrderStatusRepositoryService
        public: true
        arguments: ['@doctrine_mongodb', '@logger']  
        
    response_view_service:
        class:                         AppBundle\Services\ResponseViewService
        public: true
        arguments: ['@logger']  
        
    searcher_order_service:
        class:                         AppBundle\Services\SearcherBundle\SearcherOrderService
        public: true
        arguments: ['@fos_elastica.finder.order.order_type', '@logger']   
        
    update_order_status_listener:
        class:                         AppBundle\Services\EventListeners\UpdateOrderStatusListenerService
        public: true
        arguments: ['@fos_elastica.finder.order_status.order_status_type', '@logger']        
        tags:                                       
            - { name: kernel.event_listener, event: elastica.index.type_pre_populate, method: preIndexPopulate }
            - { name: kernel.event_listener, event: elastica.index.type_post_populate, method: postIndexPopulate }   